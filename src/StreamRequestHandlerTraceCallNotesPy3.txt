# ----- Main function -----
__main__.main

    # ----- Create `TCPServer` -----
    socketserver.TCPServer.__init__

        # ----- Call super method -----
        socketserver.TCPServer -> socketserver.BaseServer.__init__

        # ----- Create socket -----
        socket.socket.__init__

        # ----- Call `server_bind` -----
        socketserver.TCPServer.server_bind

            # ----- Bind socket to server address -----
            socket.socket -> _socket.socket.bind

        # ----- Call `server_activate` -----
        socketserver.TCPServer.server_activate

            # ----- Start listening -----
            socket.socket -> _socket.socket.listen

    # ----- Call `serve_forever` -----
    socketserver.TCPServer -> socketserver.BaseServer.serve_forever

        # ----- Create selector -----
        selectors.SelectSelector.__init__

        # ----- Register listening socket to selector -----
        selectors.SelectSelector.register

        # ----- Loop to poll listening socket's read event -----
        ```
        # Pseudo code
        while True:
            ready = select(timeout)
            if ready:
                return self._handle_request_noblock()
        ```

            # ----- Poll listening socket's read event -----
            # Only the listening socket is polled so when there is a read event
            # it must be from the listening socket.
            #
            selectors.SelectSelector.select

            # ----- Call `_handle_request_noblock` -----
            # When read event occurs, it means a client is connecting.
            socketserver.TCPServer -> socketserver.BaseServer._handle_request_noblock

                # ----- Call `get_request` -----
                socketserver.TCPServer.get_request

                    # ----- Accept the connecting socket -----
                    socket.socket.accept

                        # ----- Wrap the accepted socket's file descriptor in a socket object -----
                        socket.socket.__init__

                # ----- Call `verify_request` -----
                socketserver.TCPServer -> socketserver.BaseServer.verify_request

                # ----- Call `process_request` -----
                socketserver.TCPServer -> socketserver.BaseServer.process_request

                    # ----- Call `finish_request` -----
                    socketserver.TCPServer -> socketserver.BaseServer.finish_request

                        # ----- Create `self.RequestHandlerClass` instance -----
                        __main__.CustomRequestHandler -> socketserver.BaseRequestHandler.__init__

                            # ----- Call `setup` -----
                            __main__.CustomRequestHandler -> socketserver.StreamRequestHandler.setup

                                # ----- Create input file from the socket -----
                                socket.socket.makefile

                                    # ----- Wrap the socket in `SocketIO` -----
                                    socket.SocketIO.__init__

                                # ----- Create output file from the socket -----
                                socket.socket.makefile

                                    # ----- Wrap the socket in `SocketIO` -----
                                    socket.SocketIO.__init__

                            # ----- Call `handle` -----
                            __main__.CustomRequestHandler.handle

                                # ----- Read request data -----
                                socket.socket -> _socket.socket.recv

                                # ----- Write response data -----
                                socket.SocketIO.write

                            # ----- Call `finish` -----
                            __main__.CustomRequestHandler -> socketserver.StreamRequestHandler.finish

                                # ----- Flush output `SocketIO` -----
                                socket.SocketIO -> _io._IOBase.flush

                                # ----- Close output `SocketIO` -----
                                socket.SocketIO.close

                                # ----- Close input `SocketIO` -----
                                socket.SocketIO.close

                    # ----- Call `shutdown_request` -----
                    socketserver.TCPServer.shutdown_request

                        # ----- Close write channel -----
                        socket.socket -> _socket.socket.shutdown

                        # ----- Call `close_request` -----
                        socketserver.TCPServer.close_request

                            # ----- Close the socket -----
                            socket.socket.close
